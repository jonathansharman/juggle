// Adapted from http://twistedoakstudios.com/blog/Post2194_determining-exactly-ifwhenwhere-a-moving-line-intersected-a-moving-point

import Math;

function plus(v1, v2) {
	return [v1[0] + v2[0], v1[1] + v2[1]];
}

function minus(v1, v2) {
	return [v1[0] - v2[0], v1[1] - v2[1]];
}

function negate(v) {
	return [-v[0], -v[1]];
}

function times(v, scale) {
	return [v[0] * scale, v[1] * scale];
}

function dot(v1, v2) {
	return v1[0] * v2[0] + v1[1] * v2[1];
}

function cross(v1, v2) {
	return v1[0] * v2[1] - v1[1] * v2[0];
}

function makeLineSegment(start, end) {
	return {"start": start, "delta": minus(end, start)};
}

function lerpAcross(lineSegment, proportion) {
	return plus(lineSegment["start"], times(lineSegment["delta"], proportion));
}

function whenLineSweepsPoint(/*LineSegment*/ pathOfLineStartPoint, /*LineSegment*/ pathOfLineEndPoint, /*Point*/ point) {
	a = minus(point, pathOfLineStartPoint["start"]);
	b = negate(pathOfLineStartPoint["delta"]);
	c = minus(pathOfLineEndPoint["start"], pathOfLineStartPoint["start"]);
	d = minus(pathOfLineEndPoint["delta"], pathOfLineStartPoint["delta"]);

	result = [];
	for (t : quadraticRoots(cross(b, d), cross(a, d) + cross(b, c), cross(a, c))) {
		if (0.0 <= t && t <= 1.0) {
			start = lerpAcross(pathOfLineStartPoint, t);
			end = lerpAcross(pathOfLineEndPoint, t);
			s = lerpProjectOnto(point, makeLineSegment(start, end));
			if (s != null && 0.0 <= s && s <= 1.0) {
				result.add([t, s]);
			}
		}
	}
	return result;
}

function lerpProjectOnto(/*Point*/ point, /*LineSegment*/ line) {
	d = dot(line["delta"], line["delta"]);
	return d == 0.0 ? null : dot(minus(point, line["start"]), line["delta"]) / d;
}

function quadraticRoots(a, b, c) {
	if (a == 0.0) {
		// Linear case.
		if (b == 0.0) {
			// Constant case, either zero or infinitely many solutions (ignore the latter case).
			return [];
		} else {
			return [-c / b];
		}
	}

	// ax^2 + bx + c == 0
	// x = (-b +- sqrt(b^2 - 4ac)) / 2a

	determinant = b * b - 4 * a * c;
	if (determinant < 0.0) {
		// No real roots.
		return [];
	}

	s0 = -b / (2 * a);
	sd = determinant ** 0.5 / (2 * a);
	if (sd == 0.0) {
		return [s0 - sd];
	} else {
		return [s0 - sd, s0 + sd];
	}
}
